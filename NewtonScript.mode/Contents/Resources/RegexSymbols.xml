<?xml version="1.0" encoding="UTF-8"?>
<symbols>

    <!-- 
    The <symbol> tag specifies what is being shown in the fuction popup.
    It features the following attributes, all optional if not noted otherwise:
        id
            Has to be a unique string. Has to be specified.
        image
            Specify an image includes in the application (no extension) or
            specify an image in this modes Resources directory (with extension)
            SubEthaEdit comes with the following images:
            Symbol#, SymbolC, SymbolE, SymbolF, SymbolF(), SymbolG, SymbolK,
            SymbolL, SymbolM, SymbolP, SymbolS, SymbolT, SymbolV, SymbolWarn
        indentation
            0-15    The level of indentation
        font-weight
            normal  Normal font-weight (default)
            bold    Bold text in popup
        font-style
            normal  Normal font-weight (default)
            italic  Bold text in popup
            
        The example shows an symbol name "First example" with the image SymbolM
        and an indentation of 1.
      
    <symbol id="First Example" image="SymbolM" indentation="1">
        
        
            The regex tag specifies the regular expression that is search for this
            symbol. It contains a Ruby-flavored regular expression. If groups is
            specified in the regular expression the first group is used for the
            find string. Escape unwanted groups with (?:).
            This tag has to be specified.
            Tip: Test your expressions with SubEthaEdits "Find All" command.
            Tip: Case sensitivity can be set to ignore by including (?i) in your
                 expression.
        
        
        <regex>(function[^\n\r]*)</regex>

        
            The postprocess tag specifies the find and replaces that should
            be executed on the found string. You can use groups like \1 and the
            like. It contains a Ruby-flavored regular expression. 
            This tag is optional.
            
            The example search all strings enclosed by parens and replace them
            with a empty string. Then it searches all occurances of "foo" and
            replaces them with "bar".
        
                
        <postprocess>
            <find>\([^\)]*\)</find>
            <replace></replace>
            <find>foo</find>
            <replace>bar</replace>
        </postprocess>
    </symbol>
    -->
    
    <symbol id="Functions" font-weight="normal" font-style="normal" image="SymbolF()" indentation="0" ignoreblocks="yes">
        <regex>([a-zA-Z0-9_]+)\s*:=[\t\r\n ]*func[ \t]*(?:native[ \t]*)?(\([^)]*\))</regex>
        <postprocess>
            <find>[\n\r]</find>
            <replace> </replace>
            <find>[ \t]+</find>
            <replace> </replace>
            <find>(.*)</find>
            <replace>\1()</replace>
        </postprocess>
    </symbol>
    
    <symbol id="Methods" font-weight="normal" font-style="normal" image="SymbolM" indentation="1" ignoreblocks="yes">
        <regex>([a-zA-Z0-9_]+)\s*:[\t\r\n ]*func[ \t]*(?:native[ \t]*)?(\([^)]*\))</regex>
        <postprocess>
            <find>[\n\r]</find>
            <replace> </replace>
            <find>[ \t]+</find>
            <replace> </replace>
            <find>(.*)</find>
            <replace>\1()</replace>
        </postprocess>
    </symbol>
    
    <symbol id="CVS/SVN/Git Conflict" font-weight="bold" image="SymbolWarn" indentation="0" ignoreblocks="no">
        <regex>^&lt;&lt;&lt;&lt;&lt;&lt;&lt;([\n\r]|.)*?======([\n\r]|.)*?&gt;&gt;&gt;&gt;&gt;&gt;&gt;</regex>
        <postprocess>
            <find>.*</find>
            <replace>Versioning conflict!</replace>
        </postprocess>
    </symbol>
    
</symbols>